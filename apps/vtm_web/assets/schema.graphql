schema {
  query: RootQueryType
  mutation: RootMutationType
  subscription: RootSubscriptionType
}

type Attribute {
  attributeType: AttributeType
  description: String
  id: ID
  name: String
}

type AttributeType {
  id: ID
  name: String
  section: String
}

type Character {
  aggravatedDamage: Int
  approved: Boolean
  biography: String
  clan: Clan
  damange: Int
  description: String
  experience: Int
  generation: Int
  health: Int
  humanity: Int
  hunger: Int
  info: CharacterInfo
  isComplete: Boolean
  isNpc: Boolean
  predatorType: PredatorType
  stage: Int
  willpower: Int
  willpowerDamage: Int
}

input CharacterAttributeRequest {
  attributeId: ID!
  characterId: ID!
  value: Int!
}

input CharacterCreationRequest {
  avatar: String
  biography: String!
  chatAvatar: String
  clanId: Int!
  description: String!
  isNpc: Int
  name: String!
}

type CharacterInfo {
  avatar: String
  chatAvatar: String
  id: ID
  name: String
}

input ChatEntryRequest {
  characterId: ID!
  chatMapId: ID!
  result: String
  text: String
}

type ChatLocation {
  childs: [ChatLocation]
  description: String
  id: ID
  image: String
  isChat: Boolean
  name: String
}

type Clan {
  id: ID
  name: String
}

type CreationResult {
  id: ID
}

type MapChatEntry {
  characterChatAvatar: String
  characterId: String
  characterName: String
  chatMapId: String
  id: ID
  result: String
  text: String
}

type Master implements User {
  email: String
  id: ID
  name: String
  userCharacters: [CharacterInfo]
}

type Player implements User {
  email: String
  id: ID
  name: String
  userCharacters: [CharacterInfo]
}

type PredatorType {
  description: String
  id: ID
  name: String
}

enum Role {
  MASTER
  PLAYER
}

type RootMutationType {
  appendCharacterAttributes(newStage: Int!, request: [CharacterAttributeRequest]): Character
  createCharacter(request: CharacterCreationRequest): Character
  createChatEntry(entry: ChatEntryRequest): MapChatEntry
  createUser(email: String!, name: String!, password: String!): CreationResult
  login(email: String!, password: String!, role: Role!): Session
}

type RootQueryType {
  attributes: [Attribute]
  clans: [Clan]
  getCharacter(id: ID): Character
  list: [Player]
  mainMaps: [ChatLocation]
  map(id: ID): ChatLocation
  mapChatEntries(mapId: ID): [MapChatEntry]
  me: User
  predatorTypes: [PredatorType]
  sectionMaps(parentId: ID): [ChatLocation]
}

type RootSubscriptionType {
  newChatEntry(mapId: ID!): MapChatEntry
}

type Session {
  token: String
  user: User
}

interface User {
  email: String
  id: ID
  name: String
  userCharacters: [CharacterInfo]
}

