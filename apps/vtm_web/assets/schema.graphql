schema {
  query: RootQueryType
  mutation: RootMutationType
  subscription: RootSubscriptionType
}

input AddAdvantagesInput {
  attributes: [CharacterAttributeRequest]
  newStage: Int!
  request: CharacterFinalizationRequest!
}

type AddAdvantagesPayload {
  result: Character
}

type Attribute implements Node {
  attributeType: AttributeType
  description: String

  """The ID of an object"""
  id: ID!
  name: String
}

type AttributeType implements Node {
  """The ID of an object"""
  id: ID!
  name: String
  section: String
}

type Character implements Node {
  advantages: String
  aggravatedDamage: Int
  approved: Boolean
  avatar: String
  biography: String
  chatAvatar: String
  clan: Clan
  damage: Int
  description: String
  experience: Int
  generation: Int
  health: Int
  humanity: Int
  hunger: Int

  """The ID of an object"""
  id: ID!
  isComplete: Boolean
  isNpc: Boolean
  name: String
  notes: String
  predatorType: PredatorType
  stage: Int
  willpower: Int
  willpowerDamage: Int
}

type CharacterAttribute implements Node {
  attribute: Attribute

  """The ID of an object"""
  id: ID!
  value: Int
}

input CharacterAttributeRequest {
  attributeId: ID!
  characterId: ID!
  value: Int!
}

input CharacterCreationRequest {
  avatar: String
  biography: String!
  chatAvatar: String
  clanId: String!
  description: String!
  isNpc: Int
  name: String!
}

input CharacterFinalizationRequest {
  advantages: String!
  notes: String
  predatorTypeId: ID!
}

type CharacterStats {
  attributes: [CharacterAttribute]
  disciplines: [CharacterAttribute]
  id: ID
  predatorType: PredatorType
}

input ChatDiceEntryRequest {
  abilityId: ID
  attributeId: ID
  characterId: ID!
  chatMapId: ID!
  difficulty: Int
  freeThrow: Int
  master: Boolean
}

input ChatEntryRequest {
  characterId: ID!
  chatMapId: ID!
  text: String
}

type ChatLocation implements Node {
  children: [ChatLocation]
  description: String

  """The ID of an object"""
  id: ID!
  image: String
  isChat: Boolean
  name: String
}

type Clan implements Node {
  """The ID of an object"""
  id: ID!
  name: String
}

type CreationResult {
  id: ID
}

type Discipline implements Node {
  description: String

  """The ID of an object"""
  id: ID!
  name: String
}

scalar Hour

type LoginResponse {
  character: Character
  token: String
  user: User
}

type MapChatEntry implements Node {
  characterChatAvatar: String
  characterId: ID
  characterName: String
  chatMapId: ID

  """The ID of an object"""
  id: ID!
  insertedAt: Hour
  master: Boolean
  result: String
  text: String
}

interface Node {
  """The ID of the object."""
  id: ID!
}

type PredatorType implements Node {
  description: String

  """The ID of an object"""
  id: ID!
  name: String
}

enum Role {
  MASTER
  USER
}

type RootMutationType {
  addAdvantages(input: AddAdvantagesInput!): AddAdvantagesPayload
  appendCharacterAttributes(newStage: Int!, request: [CharacterAttributeRequest]): Character
  createCharacter(request: CharacterCreationRequest): Character
  createChatDiceEntry(entry: ChatDiceEntryRequest): MapChatEntry
  createChatEntry(entry: ChatEntryRequest): MapChatEntry
  createUser(email: String!, name: String!, password: String!): CreationResult
  deleteCharacter(characterId: ID): Boolean
  finalizeCharacter(characterId: ID): Character
  login(email: String!, password: String!, remember: Boolean!): LoginResponse
  switchCharacterAttributes(characterId: ID, firstAttribute: String, secondAttribute: String): Character
  updateSessionCharacter(characterId: ID, characterName: String): Character
  updateSessionMap(mapId: ID): ID
}

type RootQueryType {
  attributes: [Attribute]
  clanDisciplines(clanId: ID!): [Discipline]
  clans: [Clan]
  getCharacter(id: ID): Character
  getCharacterStats(characterId: ID): CharacterStats
  getSessionCharacter: Character
  list: [User]
  mainMaps: [ChatLocation]
  map(id: ID): ChatLocation
  mapChatEntries(mapId: ID): [MapChatEntry]
  me: User
  predatorTypes: [PredatorType]
  sectionMaps(parentId: ID): [ChatLocation]
  subscriptionToken: String
}

type RootSubscriptionType {
  newChatEntry(mapId: ID!, token: String!): MapChatEntry
}

type User implements Node {
  email: String

  """The ID of an object"""
  id: ID!
  name: String
  originalId: ID
  role: Role
  sessionCharacter: Character
  userCharacters: [Character]
}

