schema {
  query: RootQueryType
  mutation: RootMutationType
  subscription: RootSubscriptionType
}

input AddAdvantagesInput {
  attributes: [CharacterAttributeRequest]
  newStage: Int!
  request: CharacterFinalizationRequest!
}

type AddAdvantagesPayload {
  result: Character
}

input ApplyTemplateToCharacterInput {
  characterId: ID!
  templateId: ID!
}

type ApplyTemplateToCharacterPayload {
  result: Boolean
}

type Attribute implements Node {
  attributeType: AttributeType
  description: String

  """The ID of an object"""
  id: ID!
  name: String
}

type AttributeType implements Node {
  """The ID of an object"""
  id: ID!
  name: String
  section: String
}

input ChangeCharacterAttributeInput {
  attributeId: ID!
  characterId: ID!
  newValue: Int!
}

type ChangeCharacterAttributePayload {
  result: Boolean
}

input ChangeCharacterExperienceInput {
  characterId: ID!
  experienceChange: Int!
}

type ChangeCharacterExperiencePayload {
  result: Character
}

input ChangeCharacterNotesInput {
  advantages: String!
  characterId: ID!
  notes: String!
}

type ChangeCharacterNotesPayload {
  result: Character
}

input ChangeCharacterOtherStatsInput {
  characterId: ID!
  humanity: Int!
  predatorTypeId: ID!
  willpower: Int!
}

type ChangeCharacterOtherStatsPayload {
  result: Character
}

input ChangeCharacterStatusInput {
  advantages: String!
  characterId: ID!
  notes: String!
}

type ChangeCharacterStatusPayload {
  result: Character
}

input ChangeSheetInfoInput {
  characterId: ID!
  request: ChangeSheetInfoRequest!
}

type ChangeSheetInfoPayload {
  result: Character
}

input ChangeSheetInfoRequest {
  avatar: String
  biography: String
  chatAvatar: String
  description: String
}

type Character implements Node {
  advantages: String
  aggravatedDamage: Int
  approved: Boolean
  avatar: String
  biography: String
  bloodPotency: Int
  chatAvatar: String
  clan: Clan
  damage: Int
  dead: Boolean
  description: String
  experience: Int
  generation: Int
  health: Int
  humanity: Int
  hunger: Int

  """The ID of an object"""
  id: ID!
  isComplete: Boolean
  isNpc: Boolean
  name: String
  notes: String
  predatorType: PredatorType
  stage: Int
  stains: Int
  torpor: Boolean
  willpower: Int
  willpowerDamage: Int
}

type CharacterAttribute implements Node {
  attribute: Attribute

  """The ID of an object"""
  id: ID!
  value: Int
}

input CharacterAttributeRequest {
  attributeId: ID!
  characterId: ID!
  value: Int!
}

input CharacterCreationRequest {
  avatar: String
  biography: String!
  chatAvatar: String
  clanId: String!
  description: String!
  isNpc: Int
  name: String!
}

input CharacterFinalizationRequest {
  advantages: String!
  notes: String
  predatorTypeId: ID!
}

type CharacterStats {
  advantages: [CharacterAttribute]
  attributes: [CharacterAttribute]
  disciplines: [CharacterAttribute]
  id: ID
  predatorType: PredatorType
}

input ChatDiceEntryRequest {
  abilityId: ID
  attributeId: ID
  characterId: ID!
  chatMapId: ID!
  difficulty: Int
  freeThrow: Int
  master: Boolean
}

input ChatEntryRequest {
  characterId: ID!
  chatMapId: ID!
  text: String
}

type ChatLocation implements Node {
  children: [ChatLocation]
  description: String

  """The ID of an object"""
  id: ID!
  image: String
  isChat: Boolean
  name: String
}

type Clan implements Node {
  """The ID of an object"""
  id: ID!
  name: String
}

input CreateNewPostRequest {
  creatorCharacterId: ID
  creatorUserId: ID!
  forumThreadId: ID!
  text: String
}

input CreateNewThreadRequest {
  creatorCharacterId: ID
  creatorUserId: ID!
  description: String
  sectionId: ID!
  title: String!
}

type CreationResult {
  id: ID
}

type CreationTemplate implements Node {
  description: String

  """The ID of an object"""
  id: ID!
  name: String
}

scalar DateTime

type Discipline implements Node {
  description: String

  """The ID of an object"""
  id: ID!
  name: String
}

type ForumPost implements Node {
  creatorAvatar: String
  creatorName: String
  forumSection: ForumSection
  forumThread: ForumThread

  """The ID of an object"""
  id: ID!
  insertedAt: DateTime
  text: String
  updatedAt: DateTime
}

type ForumSection implements Node {
  canEdit: Boolean
  canView: Boolean
  description: String

  """The ID of an object"""
  id: ID!
  insertedAt: DateTime
  onGame: Boolean
  title: String
  updatedAt: DateTime
}

type ForumThread implements Node {
  creatorName: String
  description: String
  forumSection: ForumSection

  """The ID of an object"""
  id: ID!
  insertedAt: DateTime
  title: String
  updatedAt: DateTime
}

type ForumThreadPage {
  posts: [ForumPost]
  thread: ForumThread
}

scalar Hour

type LoginResponse {
  character: Character
  token: String
  user: User
}

type MapChatEntry implements Node {
  character: Character
  chatMap: ChatLocation

  """The ID of an object"""
  id: ID!
  insertedAt: Hour
  master: Boolean
  result: String
  text: String
}

type Message implements Node {
  """The ID of an object"""
  id: ID!
  insertedAt: DateTime
  modifiedAt: DateTime
  onGame: Boolean
  read: Boolean
  receiverCharacter: Character
  receiverCharacterId: ID
  receiverUser: User!
  receiverUserId: ID!
  senderCharacter: Character
  senderCharacterId: ID
  senderName: String
  senderUser: User!
  senderUserId: ID!
  subject: String!
  text: String!
}

type MessageDigest {
  totalMessages: Int
  unreadMessages: Int
}

type MessageNotification {
  message: Message
  numberUnread: Int
}

input NewForumPostInput {
  request: CreateNewPostRequest!
}

type NewForumPostPayload {
  result: ForumPost
}

input NewForumThreadInput {
  request: CreateNewThreadRequest!
}

type NewForumThreadPayload {
  result: ForumThread
}

interface Node {
  """The ID of the object."""
  id: ID!
}

type PredatorType implements Node {
  description: String

  """The ID of an object"""
  id: ID!
  name: String
}

enum Role {
  MASTER
  USER
}

type RootMutationType {
  addAdvantages(input: AddAdvantagesInput!): AddAdvantagesPayload
  appendCharacterAttributes(newStage: Int!, request: [CharacterAttributeRequest]): Character
  applyTemplateToCharacter(input: ApplyTemplateToCharacterInput!): ApplyTemplateToCharacterPayload
  approveCharacter(characterId: ID): Boolean
  changeCharacterAttribute(input: ChangeCharacterAttributeInput!): ChangeCharacterAttributePayload
  changeCharacterExperience(input: ChangeCharacterExperienceInput!): ChangeCharacterExperiencePayload
  changeCharacterNotes(input: ChangeCharacterNotesInput!): ChangeCharacterNotesPayload
  changeCharacterOtherStats(input: ChangeCharacterOtherStatsInput!): ChangeCharacterOtherStatsPayload
  changeCharacterStatus(input: ChangeCharacterStatusInput!): ChangeCharacterStatusPayload
  changeSheetInfo(input: ChangeSheetInfoInput!): ChangeSheetInfoPayload
  createCharacter(request: CharacterCreationRequest): Character
  createChatDiceEntry(entry: ChatDiceEntryRequest): MapChatEntry
  createChatEntry(entry: ChatEntryRequest): MapChatEntry
  createUser(email: String!, name: String!): CreationResult
  deleteCharacter(characterId: ID): Boolean
  deleteMessage(messageId: ID): Message
  finalizeCharacter(characterId: ID): Character
  login(email: String!, password: String!, remember: Boolean!): LoginResponse
  logout: Boolean
  newForumPost(input: NewForumPostInput!): NewForumPostPayload
  newForumThread(input: NewForumThreadInput!): NewForumThreadPayload
  requestNewPassword(userEmail: String!): Boolean
  resetSession: Boolean
  rouseCheck(input: RouseCheckInput!): RouseCheckPayload
  sendMessage(message: SendMessageRequest!): Message
  setMessageRead(messageId: ID): Message
  switchCharacterAttributes(characterId: ID, firstAttribute: String, secondAttribute: String): Character
  updateSessionCharacter(characterId: ID): Character
  updateSessionMap(mapId: ID): ID
  updateUserPassword(newPassword: String!, oldPassword: String!, repeatPassword: String!): Boolean
  useWillpower(input: UseWillpowerInput!): UseWillpowerPayload
}

type RootQueryType {
  allNpcs: [Character]
  allUsers: [User]
  attributes: [Attribute]
  charactersList: [Character]
  clanDisciplines(clanId: ID!): [Discipline]
  clans: [Clan]
  getCharacter(id: ID): Character
  getCharacterDescription(characterId: ID): Character
  getCharacterStats(characterId: ID): CharacterStats
  getCharacterStatus(characterId: ID): Character
  getCreationTemplates: [CreationTemplate]
  getForumSections: [ForumSection]
  getForumThread(id: ID): ForumThreadPage
  getForumThreads(forumSectionId: ID): [ForumThread]
  getMessage(messageId: ID): Message
  getSessionCharacter: Character
  mainMaps: [ChatLocation]
  map(id: ID): ChatLocation
  mapChatEntries(mapId: ID): [MapChatEntry]
  me: User
  messagesDigest: MessageDigest
  predatorTypes: [PredatorType]
  sectionMaps(parentId: ID): [ChatLocation]
  sessionsList: [Session]
  subscriptionToken: String
  unapprovedCharactersList: [Character]
  userEmailExists(email: String!): Boolean
  userNameExists(name: String!): Boolean
}

type RootSubscriptionType {
  newChatEntry(mapId: ID!, token: String!): MapChatEntry
  newMessageNotification(token: String!): MessageNotification
}

input RouseCheckInput {
  characterId: ID!
  chatMapId: ID!
}

type RouseCheckPayload {
  result: MapChatEntry
}

input SendMessageRequest {
  onGame: Boolean
  receiverCharacterId: ID
  receiverUserId: ID!
  replyToId: ID
  senderCharacterId: ID
  subject: String!
  text: String!
}

type Session {
  character: Character
  location: ChatLocation
  user: User
}

type User implements Node {
  email: String

  """The ID of an object"""
  id: ID!
  name: String
  originalId: ID
  receivedMessages: [Message]
  role: Role
  sentMessages: [Message]
  sessionCharacter: Character
  userCharacters: [Character]
  userSessionCharacter: Character
}

input UseWillpowerInput {
  characterId: ID!
  chatMapId: ID!
}

type UseWillpowerPayload {
  result: MapChatEntry
}

